tuneResult <- tune(svm, pr~.,  data=phone_data_pr,
ranges = list(epsilon = seq(0,0.2,0.01), cost = (1:10)))
tuneResult <- tune(svm, pr~.,  data=phone_data_pr,
ranges = list(epsilon = seq(0,1,0.1), cost = (1:10)))
tuneResult
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=2,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=2,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0.1, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0.5, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=1, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0.01, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=10,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
# error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
trControl=fit_control, tuneGrid = data.frame(k=9))
# model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=1,
#             type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
# error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
tuneResult
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=4,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
# error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=9))
model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=4,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
set.seed(100)
tuning_params <- expand.grid(k=seq(1,20,1))
knn.pr <- train(pr~., data=phone_data_pr, method="knn",
trControl=fit_control, tuneGrid = tuning_params)
knn.pr
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
trControl=fit_control, tuneGrid = data.frame(k=8))
# model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=4,
#             type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
set.seed(100)
tuning_params <- expand.grid(k=seq(1,20,1))
knn.pr <- train(pr~., data=phone_data_pr, method="knn",
trControl=fit_control, tuneGrid = tuning_params)
knn.pr
crossval.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(pr~., data=phone_data_pr[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
model <- train(pr~., data=phone_data_pr[-folds[[i]],], method="knn",
trControl=fit_control, tuneGrid = data.frame(k=8))
# model <- svm(pr~., phone_data_pr[-folds[[i]],], eps=0, cost=4,
#             type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
total <- crossval.pr(10)
mean(total)
sd(total)
crossval <- function(number){
set.seed(100)
folds <- createFolds(phone_data_gt[,c("gt")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
svm.accuracies <- c()
for (i in 1:number) {
# model <- train(gt~., data=phone_data_gt[-folds[[i]],],
#                method="leapForward", tuneGrid = data.frame(nvmax=4),
#                trControl=fit_control)
# model <- train(gt~., data=phone_data_gt[-folds[[i]],], method="knn",
#                trControl=fit_control, tuneGrid = data.frame(k=8))
model <- svm(gt~., phone_data_gt[-folds[[i]],], eps=0, cost=1,
type="eps-regression")
print(model)
print(i)
predictions <- predict(model, phone_data_gt[folds[[i]],])
error <- sqrt(mean((phone_data_gt[folds[[i]],]$gt - predictions)^2))
# error <- mean(abs(phone_data_gt[folds[[i]],]$gt - predictions))
svm.accuracies = append(error, svm.accuracies)
}
print(phone_data_gt[folds[[10]],]$gt)
print(predictions)
return(svm.accuracies)
}
total <- crossval(10)
View(phone_data_gt)
View(phone_data_gt)
