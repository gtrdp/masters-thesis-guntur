errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
mean(svm.dc$errors)
crossval.svm.pr <- function(number, epsilon, cost){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE, returnTrain = FALSE)
svm.accuracies <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=epsilon, cost=cost)
# print(model)
predictions <- predict(model, phone_data_pr[-folds[[i]],])
# rmse <- sqrt(mean((phone_data_pr[-folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[-folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
svm.dc <- crossval.svm.pr(10, 0,4)
mean
mean(svm.dc)
crossval.svm.pr <- function(number, epsilon, cost){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE, returnTrain = FALSE)
svm.accuracies <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=epsilon, cost=cost)
# print(model)
predictions <- predict(model, phone_data_pr[-folds[[i]],])
# rmse <- sqrt(mean((phone_data_pr[-folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[-folds[[i]],]$pr - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
svm.dc <- crossval.svm.pr(10, 0,1)
mean(svm.dc)
crossval.svm.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=1)
print(model)
print(i)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10, 0,1)
library(e1071)
crossval.svm.pr <- function(number){
set.seed(100)
folds <- createFolds(phone_data_pr[,c("pr")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=1)
print(model)
print(i)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
svm.dc
mean(svm.dc$errors)
library(e1071)
crossval.svm.pr <- function(number){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE,
returnTrain = FALSE)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=4)
# print(model)
prediction <- predict(model, phone_data_gt[folds[[i]],])
# error <- sqrt(mean((phone_data_gt[folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_gt[folds[[i]],]$gt, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
svm.dc
mean(svm.dc$errors)
svm.df <- data.frame(svm.dc$real, svm.dc$predictions)
names(svm.df) <- c("real", "predictions")
# sort the data frame
svm.df <- svm.df[order(svm.df$real),]
y_min <- min(svm.df$real, svm.df$predictions)
y_max <- max(svm.df$real, svm.df$predictions)
plot(svm.df$predictions, col="red", type = "l", ylim=range(c(y_min,y_max)),
ylab = "device count", xlab="index")
par(new=TRUE)
plot(svm.df$real, col="green", type="l", ylim=range(c(y_min,y_max)),
axes = FALSE, xlab = "", ylab = "")
legend("topleft", inset=.05, c("observed","predicted"), fill=c("green", "red"), horiz=TRUE)
library(e1071)
crossval.svm.pr <- function(number){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE,
returnTrain = FALSE)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=4)
# print(model)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_gt[folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_gt[folds[[i]],]$gt, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
mean(svm.dc$errors)
library(e1071)
crossval.svm.pr <- function(number){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE,
returnTrain = FALSE)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=4)
# print(model)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
mean(svm.dc$errors)
crossval.svm.gt <- function(number, epsilon, cost){
library(caret)
library(e1071)
folds <- createFolds(phone_data_gt[,c("gt")], k = number, list = TRUE, returnTrain = FALSE)
svm.accuracies <- c()
for (i in 1:number) {
model <- svm(gt~., phone_data_gt[-folds[[i]],], epsilon=epsilon, cost=cost)
predictions <- predict(model, phone_data_gt[-folds[[i]],])
# rmse <- sqrt(mean((phone_data_gt[-folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
svm.accuracy <- crossval.svm.gt(10, 0, 3)
mean(svm.accuracy)
crossval.svm.gt <- function(number, epsilon, cost){
library(caret)
library(e1071)
folds <- createFolds(phone_data_gt[,c("gt")], k = number, list = TRUE, returnTrain = FALSE)
svm.accuracies <- c()
for (i in 1:number) {
model <- svm(gt~., phone_data_gt[folds[[i]],], epsilon=epsilon, cost=cost)
predictions <- predict(model, phone_data_gt[-folds[[i]],])
# rmse <- sqrt(mean((phone_data_gt[-folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
svm.accuracy <- crossval.svm.gt(10, 0, 3)
mean(svm.accuracy)
svm.accuracy <- crossval.svm.gt(10, 0, 3)
mean(svm.accuracy)
crossval.svm.gt <- function(number, epsilon, cost){
library(caret)
library(e1071)
folds <- createFolds(phone_data_gt[,c("gt")], k = number, list = TRUE, returnTrain = FALSE)
svm.accuracies <- c()
for (i in 1:number) {
model <- svm(gt~., phone_data_gt[-folds[[i]],], epsilon=epsilon, cost=cost)
predictions <- predict(model, phone_data_gt[folds[[i]],])
# rmse <- sqrt(mean((phone_data_gt[-folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - predictions))
svm.accuracies = append(error, svm.accuracies)
}
return(svm.accuracies)
}
svm.accuracy <- crossval.svm.gt(10, 0, 3)
mean(svm.accuracy)
library(e1071)
crossval.svm.pr <- function(number){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE,
returnTrain = FALSE)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=1)
# print(model)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
mean(svm.dc$errors)
library(e1071)
set.seed(100)
# tuneResult <- tune(svm, gt~.,  data=phone_data_gt,
#                    ranges = list(epsilon = seq(0,0.4,0.01), cost = 2^(0:9)))
tuneResult <- tune(svm, gt~.,  data=phone_data_gt,
ranges = list(epsilon = seq(0,1,0.1), cost = (1:10)))
# svm.gt <- svm(gt~., phone_data_gt, epsilon=0.08, cost=2)
tuneResult$best.parameters$epsilon
tuneResult$best.parameters$cost
svm.accuracy <- crossval.svm.gt(10, tuneResult$best.parameters$epsilon,
tuneResult$best.parameters$cost)
mean(svm.accuracy)
library(e1071)
set.seed(100)
# tuneResult <- tune(svm, gt~.,  data=phone_data_gt,
#                    ranges = list(epsilon = seq(0,0.4,0.01), cost = 2^(0:9)))
tuneResult <- tune(svm, gt~.,  data=phone_data_gt,
ranges = list(epsilon = seq(0,1,0.1), cost = (1:10)))
# svm.gt <- svm(gt~., phone_data_gt, epsilon=0.08, cost=2)
tuneResult$best.parameters$epsilon
tuneResult$best.parameters$cost
svm.accuracy <- crossval.svm.gt(10, tuneResult$best.parameters$epsilon,
tuneResult$best.parameters$cost)
mean(svm.accuracy)
library(e1071)
crossval.svm.gt <- function(number){
set.seed(100)
folds <- createFolds(phone_data_gt[,c("gt")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(gt~., phone_data_gt[-folds[[i]],], nu=0.5, cost=3,
type="nu-regression")
print(model)
print(i)
prediction <- predict(model, phone_data_gt[folds[[i]],])
# error <- sqrt(mean((phone_data_gt[folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_gt[folds[[i]],]$gt, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.hc <- crossval.svm.gt(10)
svm.df <- data.frame(svm.hc$real, svm.hc$predictions)
names(svm.df) <- c("real", "predictions")
# sort the data frame
svm.df <- svm.df[order(svm.df$real),]
y_min <- min(svm.df$real, svm.df$predictions)
y_max <- max(svm.df$real, svm.df$predictions)
plot(svm.df$predictions, col="red", type = "l", ylim=range(c(y_min,y_max)),
ylab = "device count", xlab="index")
par(new=TRUE)
plot(svm.df$real, col="green", type="l", ylim=range(c(y_min,y_max)),
axes = FALSE, xlab = "", ylab = "")
legend("topleft", inset=.05, c("observed","predicted"), fill=c("green", "red"), horiz=TRUE)
mean(svm.hc$errors)
library(e1071)
crossval.svm.pr <- function(number){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE,
returnTrain = FALSE)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=1)
# print(model)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
mean(svm.dc$errors)
# svm - device count
library(e1071)
crossval.svm.pr <- function(number){
library(caret)
library(e1071)
folds <- createFolds(phone_data_pr[,c("pr")], k = number, list = TRUE,
returnTrain = FALSE)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(pr~., phone_data_pr[-folds[[i]],], epsilon=0, cost=1)
# print(model)
prediction <- predict(model, phone_data_pr[folds[[i]],])
# error <- sqrt(mean((phone_data_pr[folds[[i]],]$pr - predictions)^2))
error <- mean(abs(phone_data_pr[folds[[i]],]$pr - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_pr[folds[[i]],]$pr, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.dc <- crossval.svm.pr(10)
svm.df <- data.frame(svm.dc$real, svm.dc$predictions)
names(svm.df) <- c("real", "predictions")
# sort the data frame
svm.df <- svm.df[order(svm.df$real),]
y_min <- min(svm.df$real, svm.df$predictions)
y_max <- max(svm.df$real, svm.df$predictions)
plot(svm.df$predictions, col="red", type = "l", ylim=range(c(y_min,y_max)),
ylab = "device count", xlab="index")
par(new=TRUE)
plot(svm.df$real, col="green", type="l", ylim=range(c(y_min,y_max)),
axes = FALSE, xlab = "", ylab = "")
legend("topleft", inset=.05, c("observed","predicted"), fill=c("green", "red"), horiz=TRUE)
# svm - head count
library(e1071)
crossval.svm.gt <- function(number){
set.seed(100)
folds <- createFolds(phone_data_gt[,c("gt")], k = number,
list = TRUE, returnTrain = FALSE)
fit_control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
errors <- c()
predictions <- c()
real <- c()
for (i in 1:number) {
model <- svm(gt~., phone_data_gt[-folds[[i]],], nu=0.5, cost=3,
type="nu-regression")
# print(model)
# print(i)
prediction <- predict(model, phone_data_gt[folds[[i]],])
# error <- sqrt(mean((phone_data_gt[folds[[i]],]$gt - predictions)^2))
error <- mean(abs(phone_data_gt[folds[[i]],]$gt - prediction))
errors = append(error, errors)
predictions = append(prediction, predictions)
real = append(phone_data_gt[folds[[i]],]$gt, real)
}
return_value <- list("errors" = errors, "predictions" = predictions, "real" = real)
return(return_value)
}
svm.hc <- crossval.svm.gt(10)
svm.df <- data.frame(svm.hc$real, svm.hc$predictions)
names(svm.df) <- c("real", "predictions")
# sort the data frame
svm.df <- svm.df[order(svm.df$real),]
y_min <- min(svm.df$real, svm.df$predictions)
y_max <- max(svm.df$real, svm.df$predictions)
plot(svm.df$predictions, col="red", type = "l", ylim=range(c(y_min,y_max)),
ylab = "head count", xlab="index")
par(new=TRUE)
plot(svm.df$real, col="green", type="l", ylim=range(c(y_min,y_max)),
axes = FALSE, xlab = "", ylab = "")
legend("topleft", inset=.05, c("observed","predicted"), fill=c("green", "red"), horiz=TRUE)
y_min <- min(svm.df$real, svm.df$predictions)
y_max <- max(svm.df$real, svm.df$predictions)
plot(svm.df$predictions, col="red", type = "p", ylim=range(c(y_min,y_max)),
ylab = "head count", xlab="index")
par(new=TRUE)
plot(svm.df$real, col="green", type="p", ylim=range(c(y_min,y_max)),
axes = FALSE, xlab = "", ylab = "")
legend("topleft", inset=.05, c("observed","predicted"), fill=c("green", "red"), horiz=TRUE)
View(phone_data_pr)
View(phone_data_pr)
View(phone_data_gt)
?lm
?svm
boxplot(DC~LOC,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
svm
boxplot(DC~LOC,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
foo <- all_global_data
foo$LOC <- factor(foo$LOC, levels=c("r", "h", "p", "g"))
View(foo)
View(foo)
foo <- all_global_data
foo$LOC <- factor(foo$LOC, levels=c("r", "h", "p", "g"))
boxplot(DC~LOC,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
counts <- table(mtcars$vs, mtcars$gear)
barplot(population, main="Car Distribution by Gears and VS",
xlab="Number of Gears" , #col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
barplot(as.matrix(population), beside=TRUE, legend.text = rownames(population), args.legend = list(x="topleft"))
t(as.matrix(population)
foo <- t(as.matrix(population)
barplot(as.matrix(population), beside=TRUE, legend.text = rownames(population), args.legend = list(x="topleft"))
boxplot(DC~LOC,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
foo <- all_global_data
foo$LOC <- factor(foo$LOC, levels=c("r", "h", "p", "g"))
View(all_global_data)
View(all_global_data)
foo <- all_global_data
foo$LOC <- factor(foo$loc, levels=c("r", "h", "p", "g"))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
foo <- all_global_data
foo$LOC <- factor(foo$loc, levels=c("r", "h", "p", "g"))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
foo <- all_global_data
foo$loc <- factor(foo$loc, levels=c("r", "h", "p", "g"))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
?boxplot
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255), outline=FALSE)
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255), outline=FALSE)
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255), outline = FALSE)
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255), outline=TRUE)
boxplot(pr~loc,data=foo, main="", outline=TRUE,
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255)
)
boxplot(pr~loc,data=foo, main="", outline=TRUE,
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=TRUE, ylim=c(0,255))
boxplot(pr~loc,data=foo, main="",
xlab="location", ylab="device count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=FALSE, ylim=c(0,255))
boxplot(gt~loc,data=foo, main="",
xlab="location", ylab="head count", names=c("remote", "home", "paddepoel", "grotemarkt"),
outline=FALSE, ylim=c(0,255))
citation
citation()
citation(caret)
citation(package=caret)
citation(package='caret')
citation(package='e1071')
